<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label1.Text" xml:space="preserve">
    <value>		Hướng dẫn sử dụng phần mềm

Sau khi đăng nhập thành công, một hộp thoại mới xuất hiện, người dùng có thể tương tác trên đây, màn hình chính có các chức năng:
-Trang chủ: khi click vào đây sẽ thấy được trang chủ của phần mềm
-Hệ thống: Khi vào đây bạn có thể thêm tài khoản đăng nhập mới, thay đổi thông tin đăng nhập hay là đăng xuất khỏi tài khoản hiện tại.

-Kho: Khi vào đây bạn có thể thao tác với các chức năng chính là xem,thêm,sửa,xóa một Kho.
	
-Danh mục: 
         - Hàng hóa: Khi vào đây bạn có thể thao tác với các chức năng chính là xem,thêm,sửa,xóa  Hàng hóa
- Nhà cung cấp: Khi vào đây bạn có thể thao tác với các chức năng chính là xem,thêm,sửa,xóa Nhà cung cấp.
-Thông tin khách hàng: Khi vào đây bạn có thể thao tác với các chức năng chính là xem,thêm,sửa,xóa Kho.

- Phiếu Nhập: Khi vào đây bạn có thể thao tác với các chức năng chính là xem,thêm,sửa,xóa Phiếu nhập.
Khi bạn muốn thêm mới 1 Phiếu nhập thì bạn nhấn nút Thêm mới Phiếu Nhập; sau khi thêm xong bạn nhấn lưu.
				Khi bạn muốn xóa đi 1 Phiếu Nhập bạn nhấn nút Xóa Phiếu Nhập.
				Khi đã có Phiếu Nhập mà bạn muốn thêm 1 mặt hàng mới thì bạn nhấn nút Thêm mặt hàng. sau khi xong bạn nhấn lưu bên chi tiết Phiếu Nhập.
				Khi bạn muốn xóa đi các mặt hàng bạn nhấn xóa mặt hàng.

-Phiếu Xuất: Khi vào đây bạn có thể thao tác với các chức năng chính là xem,thêm,sửa,xóa Phiếu xuất.
Khi bạn muốn thêm mới 1 Phiếu xuât thì bạn nhấn nút Thêm mới Phiếu Xuất; sau khi thêm xong bạn nhấn lưu.
				Khi bạn muốn xóa đi 1 Phiếu Xuất bạn nhấn nút Xóa Phiếu Xuất.
				Khi đã có Phiếu Xuất mà bạn muốn thêm 1 mặt hàng mới thì bạn nhấn nút Thêm mặt hàng. sau khi xong bạn nhấn lưu bên chi tiết Phiếu Nhập.
				Khi bạn muốn xóa đi các mặt hàng bạn nhấn xóa mặt hàng.


-Trợ giúp: trong này có 2 danh mục là hướng dẫn sử dụng phần mềm và thông tin sản phẩm (phần mềm):
-Hướng dẫn: đây là form hướng dẫn sử dụng phần mềm
- Thông tin sản phẩm: các thông tin liên quan đến phần mềm

 * Lưu ý : Sau khi ấn nút lưu .
       - Nếu có hộp thoại hiện lên là thêm thành công(sửa thành công) thì là bạn đã thêm thành công 
 	-ngược lại hộp thoại hiện lên thêm không thành công(sửa không thành công) thì bạn cần kiểm tra lại các thông tin trong các trường của bảng.

</value>
  </data>
</root>